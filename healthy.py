# -*- coding: utf-8 -*-
"""pbl2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14xWQJ9rz2cJyKbLHFeKozwMRDPUAbxWb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import math

# Initializing Variables

outputVol = 5 # How much blood is flowing in general from the splitter

# Fractions of Blood to Each Box
uterusFrac = 0.1 #
liverFrac = 0.27 #
brainFrac = 0.14 #
robFrac = 1 - (uterusFrac + liverFrac + brainFrac) #

# PR Receptor Info
kBind = 1 * (10**9) # Binding Rate Constant
PR = (50000 / (6.022 * (10**23))) * (10**4)

# LH Threshold (Peak Value, signaling Progesterone release)
thres = 39.21 * 1.44
# LH and Prog arrays
# in mmol/L, per day (source 1)
prog_data = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2.5, 5, 9, 14, 18, 20, 25, 28, 31, 33, 35, 30, 28, 20, 10, 1])
# in mmol/L, per day (source 2 -- data is in IU/L)
LH_data = np.array([6, 6.1, 6.4, 6.7, 7, 7.2, 7.4, 7.6, 8, 8.5, 9, 9.5, 10, 20, 35, 40, 30, 10, 9.5, 9, 8.7, 8.4, 8.2, 8.1, 7.7, 7.5, 7.4, 7.2, 7, 6.9]) * 1.44

days = np.arange(0, 43200, 1440)
mins = np.arange(0, 43200, 1)

# plt.figure()
# plt.scatter(np.arange(0, 43200, 1440), prog_data)
# plt.show()

# polyfits and plot
degree = 3
prog_fit1 = np.polyfit(days[0:14], prog_data[0:14], degree)
prog_mins1 = np.polyval(prog_fit1, mins)
prog_fit2 = np.polyfit(days[14:25], prog_data[14:25], degree)
prog_mins2 = np.polyval(prog_fit2, mins)
prog_fit3 = np.polyfit(days[25:], prog_data[25:], degree)
prog_mins3 = np.polyval(prog_fit3, mins)

# plt.figure()
# plt.plot(mins[0:14*1440], prog_mins1[0:14*1440], label="flat")
# plt.plot(mins[14*1440:25*1440], prog_mins2[14*1440:25*1440] - 1, label="up")
# plt.plot(mins[25*1440:], prog_mins3[25*1440:] + 5, label="down")
# plt.legend()
# plt.grid(True)
# plt.show()

# SLOPES (USE ORANGE FOR RELEASE)
dt = 1
prog_slope1 = np.gradient(prog_mins1, dt)
prog_slope2 = np.gradient(prog_mins2, dt)
prog_slope3 = np.gradient(prog_mins3, dt)

# plt.figure()
# plt.plot(mins[0:14*1440], prog_slope1[0:14*1440], label="flat")
# plt.plot(mins[14*1440:25*1440], prog_slope2[14*1440:25*1440], label="up")
# plt.plot(mins[25*1440:], prog_slope3[25*1440:], label="down")
# plt.legend()
# plt.grid(True)
# plt.show()

# LH Stuff
# interpolation
LH_mins = np.interp(mins, days, LH_data)

# plt.figure()
# plt.scatter(np.arange(0, 43200, 1440), LH_data)
# plt.plot(mins, LH_mins)
# plt.show()

prog_mins = np.concatenate((prog_mins1[0:14*1440], prog_mins2[14*1440:25*1440] - 1, prog_mins3[25*1440:] + 5))
LH_mins = np.interp(mins, days, LH_data)
est_mins = (0.01*LH_mins**2 + 0.01*prog_mins**2)*(np.sin(mins*2*np.pi/28800))**2 + 5

# plt.figure()
# #lt.plot(mins, prog_mins, label='Progesterone')
# plt.plot(mins, LH_mins, label='LH')
# plt.plot(mins, est_mins, label='Estrogen')
# plt.xlim(0, 45000)
# plt.ylim(0, 60)
# plt.legend()
# plt.title("LH, Progesterone, and Estrogen Levels")

# slopes
dt = 1
LH_release = np.gradient(LH_mins, dt)
prog_release = np.gradient(prog_mins, dt)
est_release = np.gradient(est_mins, dt)

# plt.figure()
# plt.plot(mins, prog_release, label='Progesterone')
# # plt.plot(mins, LH_release, label='LH')
# # plt.plot(mins, est_release, label='Estrogen')
# plt.legend()

print(np.min(prog_release))

'''
FUNCTIONS (BOXES ON OUR DIAGRAM)
'''

# Production Box
global release
release = False
def production(time):
  global release
  LH1 = LH_release[time - 1]
  LHbase = LH_mins[time - 1]
  if release or LHbase >= thres:
    release = True
    prog1 = 2.5/24/60/30 + 1.05*prog_release[time - 1] if (prog_release[time - 1] > -0.0047) else 1/24/60 - 1.05*0.0047
  else:
    prog1 = 2.5/24/60/30 # maybe include adrenal gland release if this doesn't work
  est1 = est_release[time - 1] * (est_release[time - 1] > -0.005)

  return LH1, prog1, est1

# Splitter Box -> Mass In = Mass Out

def splitter(LH1, prog1, est1, allo1, ins1, LH11, prog11, est11, allo11, ins11):
  inletLH = LH1 + LH11
  inletProg = prog1 + prog11
  inletEst = est1 + est11
  inletAllo = allo1 + allo11
  inletIns = ins1 + ins11

  LH2 = liverFrac * inletLH
  prog2 = liverFrac * inletProg
  est2 = liverFrac * inletEst
  allo2 = liverFrac * inletAllo
  ins2 = liverFrac * inletIns

  LH3 = brainFrac * inletLH
  prog3 = brainFrac * inletProg
  est3 = brainFrac * inletEst
  allo3 = brainFrac * inletAllo
  ins3 = brainFrac * inletIns

  LH4 = uterusFrac * inletLH
  prog4 = uterusFrac * inletProg
  est4 = uterusFrac * inletEst
  allo4 = uterusFrac * inletAllo
  ins4 = uterusFrac * inletIns

  LH5 = robFrac * inletLH
  prog5 = robFrac * inletProg
  est5 = robFrac * inletEst
  allo5 = robFrac * inletAllo
  ins5 = robFrac * inletIns

  return LH2, prog2, est2, allo2, ins2, LH3, prog3, est3, allo3, ins3, LH4, prog4, est4, allo4, ins4, LH5, prog5, est5, allo5, ins5

# Liver Box
def liver(LH2, prog2, est2, allo2, ins2):
  kMetProg = math.log(2)/ (50 * 60) # Need to figure out progesterone's half life
  kMetEst = math.log(2)/ (40 * 60)
  kMetInsulin = math.log(2) / (6.5)
  kMetAllo = math.log(2) / (9 * 60)
  #kMetLH = math.log(2) / (11 * 60)
  kMetLH = 0
  prog7 = prog2 - (kMetProg * prog2)
  LH7 = LH2 - (kMetLH * LH2)
  est7 = est2 - (kMetEst * est2)
  allo7 = allo2 - (kMetAllo * allo2)
  ins7 = ins2 - (kMetInsulin * ins2)
  return LH7, prog7, est7, allo7, ins7

# Uterus Box
def uterus(LH3, prog3, est3, allo3, ins3, prog8, est8):
  LH8 = LH3
  prog8 = prog3 - (kBind * prog8 * PR)
  allo8 = allo3
  ins8 = ins3
  est8 = est3 #- 14.7e9 * est8 * 1e-12 #10 picoM to 1 N
  return LH8, prog8, est8, allo8, ins8

# Brain Box
def brain(LH4, prog4, est4, allo4, ins4, prog9):
  LH9 = LH4
  prog9 = prog4 - (kBind * prog9 * PR)
  allo9 = allo4 + (9.57 * (10**-4) * prog9 * 1000) + (7.69 * (10**(-11)))
  ins9 = ins4
  est9 = est4
  return LH9, prog9, est9, allo9, ins9

# ROB Box (insulin generation)
def rob(LH5, prog5, est5, allo5, ins5):
  LH10 = LH5
  prog10 = prog5
  allo10 = allo5
  est10 = est5
  insulinGen = 6.00 + 0.025 * (prog5 * 314.46 * (10**9) / (10**3)) + 0.086 * (est5 * 272.38 * (10**9) / (10**3))
  ins10 = ins5 + insulinGen
  return LH10, prog10, est10, allo10, ins10

# Mixer Box -> No rxns (Mass in = Mass out)

def mixer(LH7, prog7, est7, allo7, ins7, LH8, prog8, est8, allo8, ins8, LH9, prog9, est9, allo9, ins9, LH10, prog10, est10, allo10, ins10):

  prog11 = prog7 + prog8 + prog9 + prog10
  LH11 = LH7 + LH8 + LH9 + LH10
  est11 = est7 + est8 + est9 + est10
  allo11 = allo7 + allo8 + allo9 + allo10
  ins11 = ins7 + ins8 + ins9 + ins10

  return LH11, prog11, est11, allo11, ins11

'''
DATAFRAME
'''

colnames = []
compounds = ["LH", "prog", "est", "allo", "ins"]
for i in range (1, 12):
    for compound in compounds:
        colnames.append(f"{compound}{i}")

data = pd.DataFrame(columns=colnames, index=range(43201))

# initialize everything as 0, conditions/ICs below
zeros = [0] * 55
LH1, prog1, est1, allo1, ins1, LH2, prog2, est2, allo2, ins2, LH3, prog3, est3, allo3, ins3, LH4, prog4, est4, allo4, ins4, \
  LH5, prog5, est5, allo5, ins5, LH6, prog6, est6, allo6, ins6, LH7, prog7, est7, allo7, ins7, LH8, prog8, est8, allo8, ins8, \
  LH9, prog9, est9, allo9, ins9, LH10, prog10, est10, allo10, ins10, LH11, prog11, est11, allo11, ins11 = zeros

# constants/initial conditions here
# initial values into stream 11 (mmol/L)
LH11 = 6
prog11 = 1
est11 = 5
allo11 = 7.69e-11
ins11 = 2e9

# fill into row 0 of data
data.iloc[0] = [LH1, prog1, est1, allo1, ins1, LH2, prog2, est2, allo2, ins2, LH3, prog3, est3, allo3, ins3, LH4, prog4, est4, allo4, ins4, \
  LH5, prog5, est5, allo5, ins5, LH6, prog6, est6, allo6, ins6, LH7, prog7, est7, allo7, ins7, LH8, prog8, est8, allo8, ins8, \
  LH9, prog9, est9, allo9, ins9, LH10, prog10, est10, allo10, ins10, LH11, prog11, est11, allo11, ins11]

for i in range(1, 43201):
  LH1, prog1, est1 = production(i)
  LH2, prog2, est2, allo2, ins2, LH3, prog3, est3, allo3, ins3, LH4, prog4, est4, allo4, ins4, LH5, prog5, est5, allo5, ins5 = splitter(LH1, prog1, est1, allo1, ins1, LH11, prog11, est11, allo11, ins11)
  LH7, prog7, est7, allo7, ins7 = liver(LH2, prog2, est2, allo2, ins2)
  LH8, prog8, est8, allo8, ins8 = uterus(LH3, prog3, est3, allo3, ins3, prog8, est8)
  LH9, prog9, est9, allo9, ins9 = brain(LH4, prog4, est4, allo4, ins4, prog9)
  LH10, prog10, est10, allo10, ins10 = rob(LH5, prog5, est5, allo5, ins5)
  LH11, prog11, est11, allo11, ins11 = mixer(LH7, prog7, est7, allo7, ins7, LH8, prog8, est8, allo8, ins8, LH9, prog9, est9, allo9, ins9, LH10, prog10, est10, allo10, ins10)

  data.iloc[i] = [LH1, prog1, est1, allo1, ins1, LH2, prog2, est2, allo2, ins2, LH3, prog3, est3, allo3, ins3, LH4, prog4, est4, allo4, ins4, \
    LH5, prog5, est5, allo5, ins5, LH6, prog6, est6, allo6, ins6, LH7, prog7, est7, allo7, ins7, LH8, prog8, est8, allo8, ins8, \
    LH9, prog9, est9, allo9, ins9, LH10, prog10, est10, allo10, ins10, LH11, prog11, est11, allo11, ins11]
  
data.to_csv("healthy.csv", index=False)

days = np.linspace(0, 30, 43200)

plt.figure()
plt.plot(days, data['LH11'][1:], label='LH')
plt.plot(days, np.maximum(data['prog11'][1:] + 4.1, 5), label='Progesterone')
# plt.plot(np.linspace(0, 30, 1000), np.ones(1000)*5, label='PCOS')
# plt.plot(days, np.maximum(data['prog11'][1:] + 9.3, 5), label='Healthy, With Birth Control')
plt.plot(days, data['est11'][1:], label='Estrogen')
# plt.plot(data['allo11'][1:], label='allo')
# plt.plot(data['ins11'][1:], label='ins')
plt.xlabel("Time (days)")
plt.ylabel(" Hormone Concentration (mmol/L)")
plt.title("Case 1: Hormone Levels Over the Menstrual Cycle")
plt.xlim(0, 30)
plt.ylim(0, 60)
plt.legend(loc='upper left')

plt.savefig("case1hormones.png")
plt.show()

